<?php

/**
* Increase the length of the slogan.
* Implements hook_form_FORM_ID_alter.
*/
function luxmark_web_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {
    $form['site_information']['site_slogan']['#maxlength'] = 255;
}

function luxmark_web_help($path, $arg) {
    switch ($path) {
        case "admin/help#luxmark_web":
            return '<p>' . t("LuxMark Module") . '.</p>';
    }
}

function luxmark_web_permission() {
    return array(
        'submit_result' => array(
            'title' => t('Submit result'),
            'description' => t('Allow users to submit a result')
        )
    );
}

function luxmark_web_menu() {
    return array(
        'submit_result' => array(
            'title' => 'Submit result',
            'page callback' => 'luxmark_web_submit_result',
            'access arguments' => array('submit_result')
        )
    );
}

function luxmark_web_submit_result() {
    try {
        $uid = user_authenticate($_POST['name'], $_POST['password']);
        if (!$uid)
            print t("Invalid name and/or password");
        else {
            $newResult = new stdClass();
            $newResult->type = 'luxmark_result';
            node_object_prepare($newResult);
            $newResult->language = LANGUAGE_NONE;
            $newResult->uid = $uid;
            $newResult->title = $_POST['name'] . '\'s result (' . date('Y/m/d H:i:s') .  ')';

            $newResult->field_result_version[LANGUAGE_NONE][0]['value'] = $_POST['version'];
            $newResult->field_result_os[LANGUAGE_NONE][0]['value'] = $_POST['os'];
            $newResult->field_result_mode[LANGUAGE_NONE][0]['value'] = $_POST['mode'];
            $newResult->field_result_type[LANGUAGE_NONE][0]['value'] = $_POST['type'];
            $newResult->field_result_scene_name[LANGUAGE_NONE][0]['value'] = $_POST['scene_name'];
            $newResult->field_result_score[LANGUAGE_NONE][0]['value'] = $_POST['score'];
            $newResult->field_result_note[LANGUAGE_NONE][0]['value'] = $_POST['note'];
            $dev_count = $_POST['dev_count'];
            $newResult->field_result_dev_count[LANGUAGE_NONE][0]['value'] = $dev_count;

            $hasCPU = false;
            $hasGPU = false;
            $newResult->field_stage_times[LANGUAGE_NONE] = array();
            for ($i = 0; $i < $dev_count; $i++) {
                $newResult->field_result_dev_platform_name[LANGUAGE_NONE][]['value'] = $_POST['dev_platform_name'][$i];
                $newResult->field_result_dev_platform_ver[LANGUAGE_NONE][]['value'] = $_POST['dev_platform_ver'][$i];
                $newResult->field_result_dev_name[LANGUAGE_NONE][]['value'] = $_POST['dev_name'][$i];

                $type = $_POST['dev_type'][$i];
                $newResult->field_result_dev_type[LANGUAGE_NONE][]['value'] = $type;
                $hasCPU |= ($type == 'CPU');
                $hasGPU |= ($type == 'GPU');
                
                $newResult->field_result_dev_units[LANGUAGE_NONE][]['value'] = $_POST['dev_units'][$i];
                $newResult->field_result_dev_clock[LANGUAGE_NONE][]['value'] = $_POST['dev_clock'][$i];
                $newResult->field_result_dev_native_float_ve[LANGUAGE_NONE][]['value'] = $_POST['dev_native_float_vec_width'][$i];
                $newResult->field_result_dev_global_mem[LANGUAGE_NONE][]['value'] = $_POST['dev_global_mem'][$i];
                $newResult->field_result_dev_local_mem[LANGUAGE_NONE][]['value'] = $_POST['dev_local_mem'][$i];
                $newResult->field_result_dev_constant_mem[LANGUAGE_NONE][]['value'] = $_POST['dev_constant_mem'][$i];
            }

            if ($hasCPU) {
                if ($hasGPU)
                    $newResult->field_result_submode[LANGUAGE_NONE][0]['value'] = 'CPU+GPU';
                else
                    $newResult->field_result_submode[LANGUAGE_NONE][0]['value'] = 'CPU';
            } else {
                if ($hasGPU)
                    $newResult->field_result_submode[LANGUAGE_NONE][0]['value'] = 'GPU';
                else
                    $newResult->field_result_submode[LANGUAGE_NONE][0]['value'] = 'NOT APPLICABLE';                
            }

            $newResult = node_submit($newResult);

            if ($newResult) {
                node_save($newResult);
                print 'OK';
            } else
                print 'FAILED';
        }
    } catch (Exception $ex) {
        print t('Caught exception') . ': ' . $ex->getMessage();
    }
    
    exit(0);
}

function luxmark_web_symbolic_name_to_scene_path($sceneName) {
    if ($sceneName == 'LuxBall HDR')
        return 'scenes/luxball/render.cfg';
    else
        return FALSE;
}

// Translate a device into its symbolic name
function luxmark_web_symbolic_name($platformName, $deviceName, $units, $clock) {
    static $DEVICE_SYMBOLIC_NAMES = array(
        'Advanced Micro Devices, Inc.' =>
        array(
            //----------------------------------------------------------
            // HD5xxx
            //----------------------------------------------------------
            'Cedar' =>
            array(
                '2' => 'HD5450'
            ),
            'Redwood' =>
            array(
                '4' => 'HD5550',
                '5' => 'HD5x70'
            ),
            'Juniper' =>
            array(
                '9' => 'HD5750',
                '10' => 'HD5770'
            ),
            'Cypress' =>
            array(
                '14' => 'HD5830',
                '18' => 'HD5850',
                '20' => 'HD5870'
            ),
            'Hemlock' =>
            array(
                '20' => 'HD5970'
            ),
            //----------------------------------------------------------
            // HD6xxx
            //----------------------------------------------------------
            'Seymour' =>
            array(
                '2' => 'HD64x0M'
            ),
            'Caicos' =>
            array(
                '2' => 'HD6450'
            ),
            'Turks' =>
            array(
                '6' => 'HD6x70'
            ),
            'Whistler' =>
            array(
                '6' => 'HD67x0M'
            ),
            'Barts' =>
            array(
                '10' => 'HD6790',
                '12' => 'HD6850',
                '14' => 'HD6870'
            ),
            'Blackcomb' =>
            array(
                '12' => 'HD69x0M'
            ),
            'Cayman' =>
            array(
                '22' => 'HD6950',
                '24' => 'HD6970'
            ),
            //----------------------------------------------------------
            // HD7xxx
            //----------------------------------------------------------
            'Tahiti' =>
            array(
                '32' => 'HD7970'
            )
        )
    );

    if (isset($DEVICE_SYMBOLIC_NAMES[$platformName][$deviceName][$units])) {
        return $DEVICE_SYMBOLIC_NAMES[$platformName][$deviceName][$units];
    } else {
        if (isset($clock)) {
            return $deviceName . " [" . $units . " units @ " . $clock . "MHz]";
        } else {
            return $deviceName . " [" . $units . " units]";
        }
    }
}

function luxmark_web_symbolic_name_list($result) {
    if ($result->field_result_dev_count[LANGUAGE_NONE][0]['value'] > 0) {
        $uniqueDevices = array();

        for ($i = 0; $i < $result->field_result_dev_count[LANGUAGE_NONE][0]['value']; $i++) {
            $sn = luxmark_web_symbolic_name($result->field_result_dev_platform_name[LANGUAGE_NONE][$i]['value'],
                    $result->field_result_dev_name[LANGUAGE_NONE][$i]['value'],
                    $result->field_result_dev_units[LANGUAGE_NONE][$i]['value'],
                    $result->field_result_dev_clock[LANGUAGE_NONE][$i]['value']);

            if (!isset($uniqueDevices[$sn])) {
                $uniqueDevices[$sn] = 1;
            } else {
                $uniqueDevices[$sn] += 1;
            }
        }

        $first = true;
        $result = "";
        foreach (array_keys($uniqueDevices) as $unique_device) {
            if (!$first)
                $result .= " + ";
            else
                $first = false;

            if ($uniqueDevices[$unique_device] > 1)
                $result .= $uniqueDevices[$unique_device] . "x";

            $result .= $unique_device;
        }

        return check_plain($result);
    } else
        return t('N/A');
}

// Used by code in View PHP module
function luxmark_web_view_php_symbolic_name_list($data) {
    $devCount = $data->field_field_result_dev_count[0]['raw']['value'];

    if ($devCount > 0) {
        $uniqueDevices = array();

        for ($i = 0; $i < $devCount; $i++) {
            $sn = luxmark_web_symbolic_name($data->field_field_result_dev_platform_name[$i]['raw']['value'],
                    $data->field_field_result_dev_name[$i]['raw']['value'],
                    $data->field_field_result_dev_units[$i]['raw']['value'],
                    $data->field_field_result_dev_clock[$i]['raw']['value']);

            if (!isset($uniqueDevices[$sn])) {
                $uniqueDevices[$sn] = 1;
            } else {
                $uniqueDevices[$sn] += 1;
            }
        }

        $first = true;
        $nameList = '';
        foreach (array_keys($uniqueDevices) as $unique_device) {
            if (!$first)
                $nameList .= " + ";
            else
                $first = false;

            if ($uniqueDevices[$unique_device] > 1)
                $nameList .= $uniqueDevices[$unique_device] . "x";

            $nameList .= $unique_device;
        }

        return check_plain($nameList);
    } else
        return t('N/A');
}

//------------------------------------------------------------------------------
// LuxMark result custom fields
//------------------------------------------------------------------------------

function luxmark_web_custom_field_result_id_link($result) {
    $str = l($result->nid, 'node/' . $result->nid);

    if (node_access('delete', $result))
        $str .= ' (' . l('Delete this result', 'node/' . $result->nid . '/delete') . ')';

    return $str;
}

function luxmark_web_custom_field_result_dev_table($result) {
    if ($result->field_result_dev_count[LANGUAGE_NONE][0]['value'] > 0) {
        print '<table class="views-table result_dev_table">';
        print '<thead>' .
                '<th>' . t('Platform name') . '</th>' .
                '<th>' . t('Platform version') . '</th>' .
                '<th>' . t('Symbolic device name') . '</th>' .
                '<th>' . t('Device name') . '</th>' .
                '<th>' . t('Device type') . '</th>' .
                '<th>' . t('Units') . '</th>' .
                '<th>' . t('Clock') . '</th>' .
                '<th>' . t('Vector width') . '</th>' .
                '<th>' . t('Max. global mem.') . '</th>' .
                '<th>' . t('Local mem.') . '</th>' .
                '<th>' . t('Constant mem.') . '</th>' .
                '</thead><tbody>';

        for ($i = 0; $i < $result->field_result_dev_count[LANGUAGE_NONE][0]['value']; $i++) {
            print '<tr class="' . (($i % 2 == 0) ? 'odd' : 'even') . '">' .
                    '<td>' . check_plain($result->field_result_dev_platform_name[LANGUAGE_NONE][$i]['value']) . '</td>' .
                    '<td>' . check_plain($result->field_result_dev_platform_ver[LANGUAGE_NONE][$i]['value']) . '</td>' .
                    '<td>' . luxmark_web_symbolic_name($result->field_result_dev_platform_name[LANGUAGE_NONE][$i]['value'],
                            $result->field_result_dev_name[LANGUAGE_NONE][$i]['value'],
                            $result->field_result_dev_units[LANGUAGE_NONE][$i]['value'],
                            $result->field_result_dev_clock[LANGUAGE_NONE][$i]['value']) . '</td>' .
                    '<td>' . check_plain($result->field_result_dev_name[LANGUAGE_NONE][$i]['value']) . '</td>' .
                    '<td>' . check_plain($result->field_result_dev_type[LANGUAGE_NONE][$i]['value']) . '</td>' .
                    '<td>' . check_plain($result->field_result_dev_units[LANGUAGE_NONE][$i]['value']) . '</td>' .
                    '<td>' . check_plain(number_format($result->field_result_dev_clock[LANGUAGE_NONE][$i]['value'])) . ' MHz</td>' .
                    '<td>' . check_plain($result->field_result_dev_native_float_ve[LANGUAGE_NONE][$i]['value'] ). '</td>' .
                    '<td>' . check_plain(number_format($result->field_result_dev_global_mem[LANGUAGE_NONE][$i]['value'] / 1024)) . ' Kbytes</td>' .
                    '<td>' . check_plain(number_format($result->field_result_dev_local_mem[LANGUAGE_NONE][$i]['value'] / 1024)) . ' Kbytes</td>' .
                    '<td>' . check_plain(number_format($result->field_result_dev_constant_mem[LANGUAGE_NONE][$i]['value'] / 1024)) . ' Kbytes</td>' .
                    '</tr>';
        }

        print '</tbody></table>';
    }
}
